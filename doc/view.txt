About views

Views caracteristics
--------------------
- in the database, a tree where the root parent has parent_id = 1
- in the database, lines with the same view_id column
- in perfwatcher, a json_tree filled with nodes from the database with a specific view_id.
- in perfwatcher, the name of the view is the title of the root node of the
  view.

IMPORTANT : in the database, the id remains unique. There cannot be 2 lines
with distinct view_id and same id.

As a consequence, given an id, you can find the view_id.

Another consequence is that if you are looking for an id given the wrong
view_id, you will find nothing.

Note : the view_id and the id of root node of the view are not necessarily the
same.

Example of requests in the database
-----------------------------------

Select all nodes of a view V in the database :
SELECT * FROM tree WHERE view_id = V;

Find the view_id given an id X :
SELECT view_id FROM tree WHERE id = X;
Note : the answer should be unique because id is unique.

Find the name of a view V :
SELECT title FROM tree WHERE view_id = V and parent_id = 1;

Get the list of views :
SELECT title FROM tree WHERE parent_id = 1;


Notes
-----

The view_id could be put in the 'datas' column with other information. It is
easier for programmers and probably for mysql optimizations to have this
number in a specific column.

The view_id of a node is the same as the view_id of its parent. So the
view_id can be known from the root node view_id. However, we prefer to set it
in a specific column, which makes it redundant, because it's easier to find
the whole tree of a view by filtering on that comlumn.

Regenerate the view_id
----------------------
On mysql

1/ Get the number of the view_id
Either get the view_id with SELECT view_id FROM tree WHERE parent_id = 1;
Of find a free view_id with SELECT MAX(view_id)+1 from tree;

In the following, that view_id will be named VID. Replace VID with the view_id
you got.

2/ Update the root node view_id
UPDATE tree SET view_id = <VID> WHERE id = XX AND parent_id = 1;
(of course XX is the id of the root node ; the 2nd condition parent_id=1 is
only to prevent mistakes)

Example :
UPDATE tree SET view_id = 8 WHERE id = 1143 AND parent_id = 1;

3/ Update all the nodes that have a the same root id. Run the following
SQL until there is no updated rows :

UPDATE tree SET view_id = <VID> WHERE parent_id IN (SELECT id FROM (SELECT id FROM tree WHERE view_id = <VID>) s) AND view_id <> <VID>;

Example :
UPDATE tree SET view_id = 8 WHERE parent_id IN (SELECT id FROM (SELECT id FROM tree WHERE view_id = 8) s) AND view_id <> 8;

4/ All done for that view. If you want to update another view, start again
from step 1.
